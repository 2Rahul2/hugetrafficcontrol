// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: concerts_ticket.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createconcerts = `-- name: Createconcerts :one
insert into concert_tickets(id , total_tickets ,concert_name ,ticket_available_count)
values($1 ,$2 ,$3 ,$4)
RETURNING id, total_tickets, concert_name, ticket_available_count
`

type CreateconcertsParams struct {
	ID                   uuid.UUID
	TotalTickets         sql.NullInt32
	ConcertName          sql.NullString
	TicketAvailableCount sql.NullInt32
}

func (q *Queries) Createconcerts(ctx context.Context, arg CreateconcertsParams) (ConcertTicket, error) {
	row := q.db.QueryRowContext(ctx, createconcerts,
		arg.ID,
		arg.TotalTickets,
		arg.ConcertName,
		arg.TicketAvailableCount,
	)
	var i ConcertTicket
	err := row.Scan(
		&i.ID,
		&i.TotalTickets,
		&i.ConcertName,
		&i.TicketAvailableCount,
	)
	return i, err
}

const createconcertsFour = `-- name: CreateconcertsFour :one
insert into concert_tickets_4(id , total_tickets ,concert_name ,ticket_available_count)
values($1 ,$2 ,$3 ,$4)
RETURNING id, total_tickets, concert_name, ticket_available_count
`

type CreateconcertsFourParams struct {
	ID                   uuid.UUID
	TotalTickets         sql.NullInt32
	ConcertName          sql.NullString
	TicketAvailableCount sql.NullInt32
}

func (q *Queries) CreateconcertsFour(ctx context.Context, arg CreateconcertsFourParams) (ConcertTickets4, error) {
	row := q.db.QueryRowContext(ctx, createconcertsFour,
		arg.ID,
		arg.TotalTickets,
		arg.ConcertName,
		arg.TicketAvailableCount,
	)
	var i ConcertTickets4
	err := row.Scan(
		&i.ID,
		&i.TotalTickets,
		&i.ConcertName,
		&i.TicketAvailableCount,
	)
	return i, err
}

const createconcertsOne = `-- name: CreateconcertsOne :one
insert into concert_tickets_1(id , total_tickets ,concert_name ,ticket_available_count)
values($1 ,$2 ,$3 ,$4)
RETURNING id, total_tickets, concert_name, ticket_available_count
`

type CreateconcertsOneParams struct {
	ID                   uuid.UUID
	TotalTickets         sql.NullInt32
	ConcertName          sql.NullString
	TicketAvailableCount sql.NullInt32
}

func (q *Queries) CreateconcertsOne(ctx context.Context, arg CreateconcertsOneParams) (ConcertTickets1, error) {
	row := q.db.QueryRowContext(ctx, createconcertsOne,
		arg.ID,
		arg.TotalTickets,
		arg.ConcertName,
		arg.TicketAvailableCount,
	)
	var i ConcertTickets1
	err := row.Scan(
		&i.ID,
		&i.TotalTickets,
		&i.ConcertName,
		&i.TicketAvailableCount,
	)
	return i, err
}

const createconcertsThree = `-- name: CreateconcertsThree :one
insert into concert_tickets_3(id , total_tickets ,concert_name ,ticket_available_count)
values($1 ,$2 ,$3 ,$4)
RETURNING id, total_tickets, concert_name, ticket_available_count
`

type CreateconcertsThreeParams struct {
	ID                   uuid.UUID
	TotalTickets         sql.NullInt32
	ConcertName          sql.NullString
	TicketAvailableCount sql.NullInt32
}

func (q *Queries) CreateconcertsThree(ctx context.Context, arg CreateconcertsThreeParams) (ConcertTickets3, error) {
	row := q.db.QueryRowContext(ctx, createconcertsThree,
		arg.ID,
		arg.TotalTickets,
		arg.ConcertName,
		arg.TicketAvailableCount,
	)
	var i ConcertTickets3
	err := row.Scan(
		&i.ID,
		&i.TotalTickets,
		&i.ConcertName,
		&i.TicketAvailableCount,
	)
	return i, err
}

const createconcertsTwo = `-- name: CreateconcertsTwo :one
insert into concert_tickets_2(id , total_tickets ,concert_name ,ticket_available_count)
values($1 ,$2 ,$3 ,$4)
RETURNING id, total_tickets, concert_name, ticket_available_count
`

type CreateconcertsTwoParams struct {
	ID                   uuid.UUID
	TotalTickets         sql.NullInt32
	ConcertName          sql.NullString
	TicketAvailableCount sql.NullInt32
}

func (q *Queries) CreateconcertsTwo(ctx context.Context, arg CreateconcertsTwoParams) (ConcertTickets2, error) {
	row := q.db.QueryRowContext(ctx, createconcertsTwo,
		arg.ID,
		arg.TotalTickets,
		arg.ConcertName,
		arg.TicketAvailableCount,
	)
	var i ConcertTickets2
	err := row.Scan(
		&i.ID,
		&i.TotalTickets,
		&i.ConcertName,
		&i.TicketAvailableCount,
	)
	return i, err
}

const incrementConcertCount = `-- name: IncrementConcertCount :exec
update concert_tickets
set ticket_available_count = ticket_available_count - 1
where id=$1
`

func (q *Queries) IncrementConcertCount(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, incrementConcertCount, id)
	return err
}
